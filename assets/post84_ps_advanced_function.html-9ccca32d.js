import{_ as o,W as a,X as t,Z as e,$ as s,a0 as r,Y as c,G as l}from"./framework-b5535326.js";const d={},i=c(`<h2 id="前言" tabindex="-1"><a class="header-anchor" href="#前言" aria-hidden="true">#</a> 前言</h2><p>最近使用Powershell踩了一个坑，后来回想起来，这个坑上回不也踩过吗？也是来回摸索很长时间。记性不如烂笔头，记录一下。</p><h2 id="正文" tabindex="-1"><a class="header-anchor" href="#正文" aria-hidden="true">#</a> 正文</h2><blockquote><p>我的一个函数使用一个参数从管道接收一个对象集合或是数组（又多个对象），结果每次只处理一个输入对象，真奇怪啊.调试了半天，百思不得其解。</p></blockquote><p><code>直接上答案</code></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>如果函数参数设置为接受管道输入且未定义process块，则记录逐条处理将失败。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这篇文章深入探讨了PowerShell中的Begin、Process和End块，这些块是PowerShell高级函数内置的控制流，有助于开发者维护代码工作流程。文章通过比喻和示例，解释了每个块的具体目的和常见用例。</p><ol><li><p><strong>Begin块</strong>：用于设置函数，包括指定变量和数组，这些变量和数组将在函数中使用。Begin块是可选的，如果只使用Process或End块，则不需要它。Begin块中的所有内容只会在函数调用时运行一次，类似于日常工作中的准备阶段。</p></li><li><p><strong>Process块</strong>：这是PowerShell高级函数中完成工作的地方。它处理参数和通过管道输入到函数中的数据。Process块可以单独使用，不需要Begin或End块。如果函数接受单个参数值，则Process块将只处理该单个值。如果函数接受管道输入，则Process块将处理每个传入的值。文章通过示例展示了如何处理单个值和通过管道传递的数组。</p></li><li><p><strong>End块</strong>：用于执行必要的清理工作。如果在Begin或Process块中创建了对象、变量、文件等，则应在End块中清理这些资源。End块也是可选的，如果只使用Process或Begin块，则不需要它。与Process块不同，无论通过管道传递了多少个数组元素，End块中的代码都只会执行一次。</p></li></ol><p>文章通过比喻和例子强调了每个块的作用，如将一天的开始比作Begin块的初始化，将处理日常任务比作Process块的工作，将结束一天的工作并回家比作End块的清理。文章还提到了PowerShell函数应该做好一件事，并强调了将函数分解为Begin、Process和End块的重要性，以实现清晰的逻辑分离和更好的维护性。</p><h2 id="reference" tabindex="-1"><a class="header-anchor" href="#reference" aria-hidden="true">#</a> Reference</h2>`,10),p={href:"https://4sysops.com/archives/understanding-powershell-begin-process-and-end-blocks/",target:"_blank",rel:"noopener noreferrer"},h={href:"https://jeffbrown.tech/powershell-begin-process-end/",target:"_blank",rel:"noopener noreferrer"};function _(g,u){const n=l("ExternalLinkIcon");return a(),t("div",null,[i,e("ul",null,[e("li",null,[e("p",null,[e("a",p,[s("https://4sysops.com/archives/understanding-powershell-begin-process-and-end-blocks/"),r(n)])])]),e("li",null,[e("p",null,[e("a",h,[s("https://jeffbrown.tech/powershell-begin-process-end/"),r(n)])])])])])}const b=o(d,[["render",_],["__file","post84_ps_advanced_function.html.vue"]]);export{b as default};
