import{_ as l,W as r,X as s,Z as e,$ as t,a0 as n,Y as i,G as d}from"./framework-2e6688e7.js";const o={},c=i(`<div class="hint-container tip"><p class="hint-container-title">提示</p><p>方便自己快速上手使用，备查</p></div><h2 id="工具" tabindex="-1"><a class="header-anchor" href="#工具" aria-hidden="true">#</a> 工具</h2><p>工具选项：</p><ul><li>使用netsh trace命令行 (Windows)</li><li>Network Monitor 3.x (Windows)</li><li>WireShark （Windows /Linux)</li><li>tcpdump (Linux)</li></ul><h3 id="使用netsh-trace" tabindex="-1"><a class="header-anchor" href="#使用netsh-trace" aria-hidden="true">#</a> 使用Netsh Trace</h3><blockquote><p>Windwos原生自带命令抓包，不需要安装任意软件，局限是只有抓包功能，没有分析功能,如果需要分析，需要导出到其他工具，例如Network monitor 3.x或Wireshak。</p></blockquote><blockquote><p>比较合适不想或不能安装额外软件的环境。</p></blockquote><ul><li>使用</li></ul><ol><li>启动管理员命令行,启动：</li></ol><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>C:&gt; netsh trace start persistent=yes capture=yes tracefile=c:\\temp\\nettrace-boot.etl
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="2"><li>停止则执行：</li></ol><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>C:\\&gt;netsh trace stop
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,12),p={start:"3"},u={href:"https://github.com/microsoft/etl2pcapng",target:"_blank",rel:"noopener noreferrer"},h=i('<h3 id="使用network-monitor-3-x" tabindex="-1"><a class="header-anchor" href="#使用network-monitor-3-x" aria-hidden="true">#</a> 使用Network Monitor 3.x</h3><p>（无)</p><h3 id="使用wireshark" tabindex="-1"><a class="header-anchor" href="#使用wireshark" aria-hidden="true">#</a> 使用Wireshark</h3><p>(无)</p><h3 id="使用tcpdump" tabindex="-1"><a class="header-anchor" href="#使用tcpdump" aria-hidden="true">#</a> 使用Tcpdump</h3>',5),m={href:"https://icloudnative.io/posts/tcpdump-examples/",target:"_blank",rel:"noopener noreferrer"},v=i(`<p><strong>基础使用常用参数</strong></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>$ tcpdump -i eth0 -nn -s0 -v port 80 -w output.pcag -A 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li><p>-i : 选择要捕获的接口，通常是以太网卡或无线网卡，也可以是 vlan 或其他特殊接口。如果该系统上只有一个网络接口，则无需指定。</p></li><li><p>-nn : 单个 n 表示不解析域名，直接显示 IP；两个 n 表示不解析域名和端口。这样不仅方便查看 IP 和端口号，而且在抓取大量数据时非常高效，因为域名解析会降低抓取速度。</p></li><li><p>-s0 : tcpdump 默认只会截取前 96 字节的内容，要想截取所有的报文内容，可以使用 -s number， number 就是你要截取的报文字节数，如果是 0 的话，表示截取报文全部内容。</p></li><li><p>-v : 使用 -v，-vv 和 -vvv 来显示更多的详细信息，通常会显示更多与特定协议相关的信息。</p></li><li><p>-A 表示使用 ASCII 字符串打印报文的全部数据，这样可以使读取更加简单，方便使用 grep 等工具解析输出内容。</p></li><li><p>host 抓特定主机（目的和源）</p></li><li><p>port 指定端口</p></li><li><p>-w 写入输出到文件</p></li><li><p>-l 行缓冲模式。把实时输出通过管道给前天工具，例如grep</p></li></ul><p><strong>高级使用举例</strong></p><ul><li>提取HTTP用户代理</li></ul><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>$ tcpdump -nn -A -s1500 -l | grep &quot;User-Agent:&quot;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>提取 HTTP POST 请求中的密码</li></ul><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>$ tcpdump -s 0 -A -n -l | egrep -i &quot;POST /|pwd=|passwd=|password=|Host:&quot;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>提取Cookies</li></ul><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>$ tcpdump -nn -A -s0 -l | egrep -i &#39;Set-Cookie|Host:|Cookie:&#39;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>抓取 SMTP/POP3 协议的邮件</li></ul><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>$ tcpdump -nn -l port 25 | grep -i &#39;MAIL FROM\\|RCPT TO&#39;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,12);function x(g,b){const a=d("ExternalLinkIcon");return r(),s("div",null,[c,e("ol",p,[e("li",null,[t("最后把ETL文件和CAB文件拷贝出来，使用其他分析工具分析，例如Network Monitor 3.x 如果是拿到Wireshark下，需要把ETL转换成pcag，转换工具： "),e("a",u,[t("ETL2PCAG"),n(a)])])]),h,e("blockquote",null,[e("p",null,[t("来源："),e("a",m,[t("米开朗基杨 Tcpdump 示例教程"),n(a)])])]),v])}const k=l(o,[["render",x],["__file","post40_nc_nm.html.vue"]]);export{k as default};
