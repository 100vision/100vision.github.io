const e=JSON.parse(`{"key":"v-7a062556","path":"/zh/%E4%BF%A1%E6%81%AF%E6%8A%80%E6%9C%AF/SysOps/post85_inux_basis_tools_screen_howto.html","title":"Linux基础：必备工具:如何使用Screen远程管理","lang":"zh-CN","frontmatter":{"title":"Linux基础：必备工具:如何使用Screen远程管理","icon":"page","order":85,"date":"2024-02-06T00:00:00.000Z","category":["Linux"],"tag":["Linux基础","工具","效率工具","SSH","远程管理"],"sticky":false,"star":true,"description":"前言 SSH远程会话断开,会话下的正在执行的子进程都会强行退出不再运行，这是因为系统会向它们整个进程组（会话父进程sshd和会话子进程）发送SIGHUP信号(Signal Hang UP) ，默认情况下，进程组收到后再回响应（即退出). 要保持SSH会话里的进程继续运行，有多个选项： 使用 nohup，对系统的SIGHUP信号不理会，这样进程仍能执行。 使用 screen，把进程分离（挂起），仍可以再后台进行。","head":[["meta",{"property":"og:url","content":"https://blog.solex-inc.com/zh/%E4%BF%A1%E6%81%AF%E6%8A%80%E6%9C%AF/SysOps/post85_inux_basis_tools_screen_howto.html"}],["meta",{"property":"og:site_name","content":"Tim's Blog"}],["meta",{"property":"og:title","content":"Linux基础：必备工具:如何使用Screen远程管理"}],["meta",{"property":"og:description","content":"前言 SSH远程会话断开,会话下的正在执行的子进程都会强行退出不再运行，这是因为系统会向它们整个进程组（会话父进程sshd和会话子进程）发送SIGHUP信号(Signal Hang UP) ，默认情况下，进程组收到后再回响应（即退出). 要保持SSH会话里的进程继续运行，有多个选项： 使用 nohup，对系统的SIGHUP信号不理会，这样进程仍能执行。 使用 screen，把进程分离（挂起），仍可以再后台进行。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-02-06T08:24:14.000Z"}],["meta",{"property":"article:tag","content":"Linux基础"}],["meta",{"property":"article:tag","content":"工具"}],["meta",{"property":"article:tag","content":"效率工具"}],["meta",{"property":"article:tag","content":"SSH"}],["meta",{"property":"article:tag","content":"远程管理"}],["meta",{"property":"article:published_time","content":"2024-02-06T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-02-06T08:24:14.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Linux基础：必备工具:如何使用Screen远程管理\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-02-06T00:00:00.000Z\\",\\"dateModified\\":\\"2024-02-06T08:24:14.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"前言","slug":"前言","link":"#前言","children":[]},{"level":2,"title":"正文","slug":"正文","link":"#正文","children":[{"level":3,"title":"原理","slug":"原理","link":"#原理","children":[]},{"level":3,"title":"使用举例","slug":"使用举例","link":"#使用举例","children":[]}]},{"level":2,"title":"参考","slug":"参考","link":"#参考","children":[]}],"git":{"createdTime":1707207854000,"updatedTime":1707207854000,"contributors":[{"name":"100vision","email":"lin.tixiang@gmail.com","commits":1}]},"readingTime":{"minutes":3.13,"words":939},"filePathRelative":"zh/信息技术/SysOps/post85_inux_basis_tools_screen_howto.md","localizedDate":"2024年2月6日","excerpt":"<h2> 前言</h2>\\n<p>SSH远程会话断开,会话下的正在执行的子进程都会强行退出不再运行，这是因为系统会向它们整个进程组（会话父进程sshd和会话子进程）发送<code>SIGHUP</code>信号(Signal Hang UP) ，默认情况下，进程组收到后再回响应（即退出).</p>\\n<p>要保持SSH会话里的进程继续运行，有多个选项：</p>\\n<ul>\\n<li>使用 <code>nohup</code>，对系统的<code>SIGHUP</code>信号不理会，这样进程仍能执行。</li>\\n<li>使用 <code>screen</code>，把进程分离（挂起），仍可以再后台进行。</li>\\n</ul>","autoDesc":true}`);export{e as data};
