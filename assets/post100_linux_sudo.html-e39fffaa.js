import{_ as s,W as n,X as l,Z as e,$ as i,a0 as d,Y as o,G as r}from"./framework-b5535326.js";const t={},c=o(`<h2 id="前言" tabindex="-1"><a class="header-anchor" href="#前言" aria-hidden="true">#</a> 前言</h2><p>了解Shell的环境变量。</p><h3 id="_1-创建变量" tabindex="-1"><a class="header-anchor" href="#_1-创建变量" aria-hidden="true">#</a> 1. 创建变量</h3><ul><li>使用<code>env</code>创建临时变量</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">env</span> <span class="token assign-left variable">var1</span><span class="token operator">=</span>vaule1 <span class="token assign-left variable">var2</span><span class="token operator">=</span>value2 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>使用 <code>export</code>创建临时变量</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token builtin class-name">export</span> <span class="token assign-left variable">var1</span><span class="token operator">=</span>value1
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>查看环境变量</li></ul><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>printenv: printenv MY_VAR
env: env | grep MY_VAR
echo: echo $MY_VAR
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>env 和 export的区别</strong></p><p>export: 用于将变量导出为环境变量，使得变量在当前 shell 及其子 shell 中可用。 env: 用于显示当前 shell 的环境变量，或者在修改后的环境中运行另一个程序。</p><ul><li>用途不同: export 用于导出变量和函数，env 用于显示环境变量或运行程序。</li><li>功能不同: export 主要用于变量共享，env 主要用于环境变量管理和程序运行。</li><li>使用场景不同: export 用于跨 shell 会话的变量共享，env 用于查看或修改环境变量。 通过合理使用 export 和 env 命令，你可以实现更灵活的脚本编写和环境管理。</li></ul><h3 id="_2-永久变量" tabindex="-1"><a class="header-anchor" href="#_2-永久变量" aria-hidden="true">#</a> 2. 永久变量</h3><ul><li>创建永久变量</li></ul><p>以<code>Bash</code>举例。可以通过编辑 ~/.bashrc 或 ~/.bash_profile 文件来创建永久环境变量。添加</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>export var1=value1
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_2-父shell和子shell之间环境变量使用" tabindex="-1"><a class="header-anchor" href="#_2-父shell和子shell之间环境变量使用" aria-hidden="true">#</a> 2. 父Shell和子Shell之间环境变量使用</h3><p><strong>重要说明</strong></p><ul><li>子Shell会继承父Shell所有变量；</li><li>在子Shell中对变量修改不会影响父Shell变量 （但可以实现）</li></ul><p><strong>创建子Shell</strong></p><ul><li>方法1: 在当前bash下执行<code>bash</code>就创建了一个子shell。例：</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">bash</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>方法2: 在当前bash下执行一个shell脚本，该脚本就会创建一个子shell运行该脚本，例：</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ demo.sh
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>方法3: 在当前shell下使用<code>()</code> 括号. 例：</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">(</span>export <span class="token assign-left variable">var1</span><span class="token operator">=</span>valued<span class="token punctuation">;</span><span class="token function">env</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>方法4: 在当前Shell下使用<code>$( )</code>。可以把子shell的执行结果返回给父shell。例：</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token variable"><span class="token variable">$(</span><span class="token builtin class-name">export</span> <span class="token assign-left variable">var1</span><span class="token operator">=</span>valued<span class="token punctuation">;</span><span class="token function">env</span><span class="token variable">)</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_3-父shell获取子shell的环境变量传递" tabindex="-1"><a class="header-anchor" href="#_3-父shell获取子shell的环境变量传递" aria-hidden="true">#</a> 3. 父shell获取子shell的环境变量传递</h3><blockquote><p>来自DeepSeek：子 shell 无法直接修改父 shell 的环境变量。环境变量在子 shell 中的修改仅限于子 shell 本身，不会影响父 shell。然而，你可以通过一些间接的方法将子 shell 中的变量值传递回父 shell。以下是几种常见的方法：&quot;</p></blockquote><ul><li>使用<code>source</code> 或 <code>.</code> 在当前shell运行脚本，改变脚本的默认行为。而不是在子shell执行；这样脚本修改了变量会反应到当前shell。</li></ul><p>示例：</p><p>创建一个 <code>demo.sh</code></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token shebang important">#!/bin/bash</span>
<span class="token assign-left variable">var1</span><span class="token operator">=</span><span class="token string">&quot;hello&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>然后，在当前shell 使用source 执行该脚本，则当前shell的var1变量会被修改。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token builtin class-name">source</span>  demo.sh
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>使用 <code>read</code> 和 <code>echo</code></li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token builtin class-name">read</span> MY_VAR <span class="token operator">&lt;&lt;&lt;</span> <span class="token variable"><span class="token variable">$(</span><span class="token assign-left variable">MY_VAR</span><span class="token operator">=</span>world<span class="token punctuation">;</span> <span class="token builtin class-name">echo</span> $MY_VAR<span class="token variable">)</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_4-sudo和环境变量" tabindex="-1"><a class="header-anchor" href="#_4-sudo和环境变量" aria-hidden="true">#</a> 4. sudo和环境变量</h3><ul><li>sudo执行命令时，使用目标用户的环境变量</li></ul><p>使用<code>sudo -i</code> 将会使用和加载目标用户的环境变量 ,例：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">sudo</span> <span class="token parameter variable">-i</span> <span class="token string">&quot;command&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>sudo执行命令时，传递当前用户的环境变量（加载到目标用户的shell）</li></ul><p>使用<code>sudo -E</code> 或 <code>--preserve-env </code> 把当前用户的多个环境变量传给目标用户，然后执行command</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">sudo</span> --preserve-env<span class="token operator">=</span><span class="token environment constant">HOME</span>,<span class="token environment constant">PATH</span> /usr/bin/env
<span class="token function">sudo</span> <span class="token parameter variable">-E</span><span class="token operator">=</span><span class="token environment constant">HOME</span>,<span class="token environment constant">PATH</span> /usr/bin/env
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="参考" tabindex="-1"><a class="header-anchor" href="#参考" aria-hidden="true">#</a> 参考</h2>`,46),p=e("li",null,"DeepSeek Chat",-1),u={href:"https://www.petefreitag.com/blog/environment-variables-sudo/",target:"_blank",rel:"noopener noreferrer"};function h(v,b){const a=r("ExternalLinkIcon");return n(),l("div",null,[c,e("ul",null,[p,e("li",null,[e("a",u,[i("Passing Environment Variables to Sudo Command"),d(a)])])])])}const g=s(t,[["render",h],["__file","post100_linux_sudo.html.vue"]]);export{g as default};
