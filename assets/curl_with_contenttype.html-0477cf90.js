import{_ as n,W as t,X as s,Z as a,$ as o,a0 as r,Y as i,G as l}from"./framework-b5535326.js";const p={},c=i(`<h2 id="了解http-content-type的起因" tabindex="-1"><a class="header-anchor" href="#了解http-content-type的起因" aria-hidden="true">#</a> 了解Http Content Type的起因</h2><p>curl，一个很好的api调试工具。好几次想在Linxu Shell使用curl调试上游api接口，但我用起来不是很利索，原因之一是对<strong>Content Type</strong> 记不住有哪几种，以及它们之间的区别。</p><h2 id="什么是content-type" tabindex="-1"><a class="header-anchor" href="#什么是content-type" aria-hidden="true">#</a> 什么是Content Type</h2><blockquote><p>一般是指网页中存在的 Content-Type，用于定义网络文件的类型和网页的编码，决定浏览器将以什么形式、什么编码读取这个文件，这就是经常看到一些 PHP 网页点击的结果却是下载一个文件或一张图片的原因。Content-Type 标头告诉客户端实际返回的内容的内容类型。</p></blockquote><h2 id="curl常用的content-type" tabindex="-1"><a class="header-anchor" href="#curl常用的content-type" aria-hidden="true">#</a> curl常用的Content Type</h2><p>使用curl做api接口测试时，常会用的Content Type:</p><ul><li>application/json</li><li>application/x-www-form-urlencoded</li></ul><p>这两个常用来做POST提交。它们的区别是：</p><ul><li>applicaton/json 提交的是json格式的数据，数据放在<strong>http body</strong>里面。</li><li>application/x-www-form-urlencoded 提交的是类似key1=val1&amp;key2=val2键值对，通常是表单。数据也是放在<strong>http body</strong>里面</li></ul><div class="hint-container tip"><p class="hint-container-title">总结</p><p>它们的区别是提交的数据结构体不同，但都是在http body里面</p></div><div class="hint-container warning"><p class="hint-container-title">注意区分</p><p>Http GET方法有时也用于提交，也使用到了Parameters参数，也是以键值对形式，但提交的参数是在<strong>http header</strong>里，不是<strong>http body</strong></p></div><h2 id="curl-post数据到api接口" tabindex="-1"><a class="header-anchor" href="#curl-post数据到api接口" aria-hidden="true">#</a> curl POST数据到api接口</h2><h3 id="_1、提交json" tabindex="-1"><a class="header-anchor" href="#_1、提交json" aria-hidden="true">#</a> 1、提交json</h3><div class="hint-container note"><p class="hint-container-title">注意</p><p>提交json, 需要在header中显式指定Content-Type为applicaiton/json，因为curl默认是application/x-www-form-urlencoded</p></div><ul><li>在命令行上提交json结构数据。</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">curl</span> <span class="token parameter variable">-H</span> <span class="token string">&#39;content-type: application/json&#39;</span> <span class="token parameter variable">-X</span> POST <span class="token parameter variable">-d</span> <span class="token string">&#39;{&quot;accountType&quot;:&quot;4&quot;,&quot;channel&quot;:&quot;1&quot;}&#39;</span> http://192.168.129.xx/my-api
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>直接提交本地json文件</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">curl</span> <span class="token parameter variable">-X</span> POST <span class="token parameter variable">-H</span> <span class="token string">&#39;content-type: application/json&#39;</span>  <span class="token parameter variable">-d</span> @/apps/test.json http://192.168.129.xx/my-api
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_2-提交application-x-www-form-urlencoded" tabindex="-1"><a class="header-anchor" href="#_2-提交application-x-www-form-urlencoded" aria-hidden="true">#</a> 2. 提交application/x-www-form-urlencoded</h3><p>application/x-www-form-urlencoded是默认数据格式，即表单KV ，例：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">curl</span> <span class="token parameter variable">-d</span> <span class="token assign-left variable">key1</span><span class="token operator">=</span>value1<span class="token operator">&amp;</span><span class="token assign-left variable">key2</span><span class="token operator">=</span>value2 http://example.com
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="扩展" tabindex="-1"><a class="header-anchor" href="#扩展" aria-hidden="true">#</a> 扩展</h2>`,22),d={href:"https://www.runoob.com/http/http-content-type.html",target:"_blank",rel:"noopener noreferrer"},h=a("li",null,"http body中的数据提交后的后端接收(Springboot使用@requestBody注解接收)",-1);function u(m,b){const e=l("ExternalLinkIcon");return t(),s("div",null,[c,a("ul",null,[a("li",null,[a("a",d,[o("更多Content-Type"),r(e)])]),h])])}const y=n(p,[["render",u],["__file","curl_with_contenttype.html.vue"]]);export{y as default};
