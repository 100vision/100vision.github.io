import{_ as n,W as s,X as a,Y as e}from"./framework-b5535326.js";const o={},t=e(`<h2 id="前言" tabindex="-1"><a class="header-anchor" href="#前言" aria-hidden="true">#</a> 前言</h2><p>几个常用Powershell参数修饰词</p><h2 id="正文" tabindex="-1"><a class="header-anchor" href="#正文" aria-hidden="true">#</a> 正文</h2><div class="language-powershell line-numbers-mode" data-ext="powershell"><pre class="language-powershell"><code><span class="token keyword">function</span> <span class="token function">Write-Log</span>
<span class="token punctuation">{</span>
    <span class="token namespace">[CmdletBinding()]</span>
    <span class="token keyword">Param</span>
    <span class="token punctuation">(</span>
        <span class="token namespace">[Parameter(Mandatory=$true,
                   ValueFromPipelineByPropertyName=$true)]</span>
        <span class="token namespace">[ValidateNotNullOrEmpty()]</span>
        <span class="token punctuation">[</span>Alias<span class="token punctuation">(</span><span class="token string">&quot;LogContent&quot;</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
        <span class="token namespace">[string]</span><span class="token variable">$Message</span><span class="token punctuation">,</span>

        <span class="token namespace">[Parameter(Mandatory=$false)]</span>
        <span class="token punctuation">[</span>Alias<span class="token punctuation">(</span><span class="token string">&#39;LogPath&#39;</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
        <span class="token namespace">[string]</span><span class="token variable">$Path</span>=<span class="token string">&#39;C:\\Logs\\PowerShellLog.log&#39;</span><span class="token punctuation">,</span>
        
        <span class="token namespace">[Parameter(Mandatory=$false)]</span>
        <span class="token punctuation">[</span>ValidateSet<span class="token punctuation">(</span><span class="token string">&quot;Error&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;Warn&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;Info&quot;</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
        <span class="token namespace">[string]</span><span class="token variable">$Level</span>=<span class="token string">&quot;Info&quot;</span><span class="token punctuation">,</span>
        
        <span class="token namespace">[Parameter(Mandatory=$false)]</span>
        <span class="token namespace">[switch]</span><span class="token variable">$NoClobber</span>
    <span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>Mandatory=$true | false</code> 修饰参数，是否强制要求函数带上这个参数</li><li><code>ValueFromPipelineByPropertyName=$true | false</code> ，是否从管道接收属性值，比较常用如果从上一个cmdlet的输出当输入</li><li><code>[ValidateNotNullOrEmpty()]</code>，验证参数值是否null</li><li><code>[Alias(&quot;LogContent&quot;)]</code>， 参数别名</li><li><code>[ValidateSet(&quot;Error&quot;,&quot;Warn&quot;,&quot;Info&quot;)]</code> 限定参数可选值</li><li><code>[switch]$NoClobber</code>， 定义一个开关布尔值数，使用 <code>-NoClobber</code>。带上默认值则<code>true</code>,不带则<code>false</code></li></ul><h3 id="补充" tabindex="-1"><a class="header-anchor" href="#补充" aria-hidden="true">#</a> 补充</h3><div class="hint-container tip"><p class="hint-container-title">（2024/06/11 补充)</p><p><code>CmdletBinding</code> 是 PowerShell 中的一个特性，用于标记自定义函数具有类似于内置 cmdlet 的行为。当你在 PowerShell 函数定义中添加 <code>[CmdletBinding()]</code> 特性时，你为函数赋予了一些特定的功能和规则，这些功能通常与 PowerShell 的命令行接口相一致。以下是一些 <code>CmdletBinding</code> 特性的关键特性：</p><ol><li><p><strong>参数设置器 (Parameter Sets)</strong>：你可以定义多个参数集，允许用户以不同方式调用函数，同时确保参数的互斥性和必需性。</p></li><li><p><strong>开关参数 (Switch Parameters)</strong>：允许你创建不需要值的布尔参数。</p></li><li><p><strong>常见参数 (Common Parameters)</strong>：启用一些常见的 PowerShell 参数，如 <code>-Verbose</code>, <code>-Debug</code>, <code>-ErrorAction</code>, <code>-WarningAction</code>, <code>-WhatIf</code> 和 <code>-Confirm</code> 等，这些参数提供了诊断和控制执行流程的选项。</p></li><li><p><strong>绑定行为 (Binding Behavior)</strong>：例如，<code>-Confirm</code> 和 <code>-WhatIf</code> 参数会影响函数的执行，使得在执行前可以确认或预览操作。</p></li><li><p><strong>错误处理 (Error Handling)</strong>：可以指定如何处理错误，比如使用 <code>-ErrorAction</code> 参数来控制遇到错误时的行为。</p></li><li><p><strong>命令生命周期回调方法 (Command Lifecycle Callback Methods)</strong>：如 <code>BeginProcessing</code>, <code>ProcessRecord</code>, 和 <code>EndProcessing</code> 方法，这些方法在函数执行的不同阶段被调用，让你可以控制函数的执行流程。</p></li></ol><p>例如，一个简单的带有 <code>CmdletBinding</code> 的 PowerShell 函数定义如下：</p><div class="language-powershell line-numbers-mode" data-ext="powershell"><pre class="language-powershell"><code><span class="token keyword">function</span> MyFunction <span class="token punctuation">{</span>
    <span class="token namespace">[CmdletBinding()]</span>
    <span class="token keyword">param</span><span class="token punctuation">(</span>
        <span class="token namespace">[Parameter(Mandatory=$true)]</span>
        <span class="token namespace">[string]</span><span class="token variable">$Name</span>
    <span class="token punctuation">)</span>
    <span class="token function">Write-Output</span> <span class="token string">&quot;Hello, <span class="token variable">$Name</span>!&quot;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个例子中，<code>CmdletBinding</code> 特性使函数具备了 PowerShell cmdlet 的基本行为，<code>Mandatory=$true</code> 表示 <code>Name</code> 参数是必需的。</p></div>`,7),l=[t];function i(c,p){return s(),a("div",null,l)}const r=n(o,[["render",i],["__file","post93_ps_function_commonly_used_parameter_options.html.vue"]]);export{r as default};
