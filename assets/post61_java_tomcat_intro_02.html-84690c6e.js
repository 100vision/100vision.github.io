import{_ as a,W as o,X as c,Z as e,$ as n,a0 as r,Y as i,G as l}from"./framework-b5535326.js";const d="/assets/post60_tomcat_arch-c089a686.png",s={},p=i('<h2 id="前言" tabindex="-1"><a class="header-anchor" href="#前言" aria-hidden="true">#</a> 前言</h2><p>看到一篇写的很好Tomcat组成，全文转载。</p><blockquote><p>Tomcat作为一款Web服务器产品，主要有两个角色，<code>Connector</code> 和 <code>Servlet</code>。</p></blockquote><ul><li>一个是作为一个Http服务器，接收和响应Http请求,对应的是Tomcat的<code>Connector</code>组件；</li><li>另一个则是Servlet容器，存储和处理所有应用的Servlet 实例，对应的是Tomcat的Web容器组件；</li></ul><h2 id="正文" tabindex="-1"><a class="header-anchor" href="#正文" aria-hidden="true">#</a> 正文</h2><h3 id="connector" tabindex="-1"><a class="header-anchor" href="#connector" aria-hidden="true">#</a> Connector</h3><p>当一个请求进来的时候，Connector负责解析请求信息，并封装成一个ServletRequest 对象，交给容器。</p><p>Connector由以下3个组件组成：</p><ul><li><code>EndPoint</code>, 监听 Socket 请求，实现Socket的接收和发送，是传输层的抽象，实现TCP/IP协议</li><li><code>Processor</code>, 用来接收EndPoint传递过来的字节流，将字节流转化成Request，实现Http协议</li><li><code>Adapter</code>, 适配器，这里主要是将Request适配成容器可接收的ServletRequest。</li></ul><h3 id="servlet-catalina容器" tabindex="-1"><a class="header-anchor" href="#servlet-catalina容器" aria-hidden="true">#</a> Servlet (Catalina容器)</h3><figure><img src="'+d+`" alt="Tomcat Architecture" tabindex="0" loading="lazy"><figcaption>Tomcat Architecture</figcaption></figure><p>Tomcat启动的时候就会创建Server 实例，其他实例是通过解析server.xml完成创建。</p><ul><li><p>一个Server实例包含多个Service实例，<code>我的理解：例如按业务分Service</code></p></li><li><p>一个Service实例包含多个connector实例和一个Container实例。<code>我的理解：一个connector代表一个监听服务端口。例如:443,:8080</code></p></li><li><p>Container实例包含一个<code>Engine</code>实例，一个Engine实例可以有多个Host，</p></li><li><p>一个Host就代表一个站点。例如：</p></li></ul><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>abc.com
123.com
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>Context则表示一个 Web 应用。例如：</li></ul><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>/orders
/products
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>一个站点下面可以有多个应用，Context对应就是<code>webapp</code>下的每个项目。</p><p>所以最终当一个请求进来的时候，Tomcat会通过连接器Coyote组件完成请求路径的解析，进而将请求交给Catalina容器去指定的对应的Servlet容器执行。</p><h2 id="参考" tabindex="-1"><a class="header-anchor" href="#参考" aria-hidden="true">#</a> 参考</h2>`,19),u={href:"https://blog.csdn.net/lveex/article/details/109044237",target:"_blank",rel:"noopener noreferrer"};function h(v,m){const t=l("ExternalLinkIcon");return o(),c("div",null,[p,e("p",null,[e("a",u,[n("浅谈Tomcat的体系结构"),r(t)])])])}const x=a(s,[["render",h],["__file","post61_java_tomcat_intro_02.html.vue"]]);export{x as default};
