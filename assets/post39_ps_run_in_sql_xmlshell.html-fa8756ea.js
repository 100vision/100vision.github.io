import{_ as s,W as n,X as a,Y as e}from"./framework-2e6688e7.js";const t={},l=e(`<p>To execute a PowerShell script block using SQL Server&#39;s <code>xmlcmdshell</code> stored procedure, you can follow these steps:</p><ol><li>Enable the <code>xp_cmdshell</code> feature in SQL Server, if it&#39;s not already enabled. Execute the following SQL command:</li></ol><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">EXEC</span> sp_configure <span class="token string">&#39;show advanced options&#39;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token keyword">RECONFIGURE</span><span class="token punctuation">;</span>
<span class="token keyword">EXEC</span> sp_configure <span class="token string">&#39;xp_cmdshell&#39;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token keyword">RECONFIGURE</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>Create a table to store the PowerShell script:</li></ol><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> dbo<span class="token punctuation">.</span>PowerShellScripts <span class="token punctuation">(</span>ScriptID <span class="token keyword">INT</span> <span class="token keyword">IDENTITY</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span><span class="token punctuation">,</span> Script NVARCHAR<span class="token punctuation">(</span>MAX<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="3"><li>Insert the PowerShell script into the table:</li></ol><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> dbo<span class="token punctuation">.</span>PowerShellScripts <span class="token punctuation">(</span>Script<span class="token punctuation">)</span>
<span class="token keyword">VALUES</span> <span class="token punctuation">(</span>N<span class="token string">&#39;
# PowerShell script code goes here
$variable = &quot;Hello, PowerShell!&quot;
Write-Output $variable
&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Replace the script content in the <code>VALUES</code> clause with your actual PowerShell script.</p><ol start="4"><li>Execute the PowerShell script block using the <code>xmlcmdshell</code> stored procedure:</li></ol><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">DECLARE</span> <span class="token variable">@cmd</span> NVARCHAR<span class="token punctuation">(</span>MAX<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">SET</span> <span class="token variable">@cmd</span> <span class="token operator">=</span> N<span class="token string">&#39;
&lt;root&gt;
    &lt;command&gt;
        &lt;script&gt;
            &lt;![CDATA[&#39;</span> <span class="token operator">+</span>
            <span class="token punctuation">(</span><span class="token keyword">SELECT</span> Script <span class="token keyword">FROM</span> dbo<span class="token punctuation">.</span>PowerShellScripts <span class="token keyword">WHERE</span> ScriptID <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span>
            N<span class="token string">&#39;]]&gt;
        &lt;/script&gt;
    &lt;/command&gt;
&lt;/root&gt;
&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">EXEC</span> sp_xml_preparedocument <span class="token variable">@idoc</span> OUTPUT<span class="token punctuation">,</span> <span class="token variable">@cmd</span><span class="token punctuation">;</span>

<span class="token keyword">EXEC</span> xmlcmdshell <span class="token string">&#39;powershell.exe&#39;</span><span class="token punctuation">,</span> <span class="token variable">@cmd</span><span class="token punctuation">;</span>

<span class="token keyword">EXEC</span> sp_xml_removedocument <span class="token variable">@idoc</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>In the above example, the script with <code>ScriptID = 1</code> is retrieved from the table <code>PowerShellScripts</code> and executed using the <code>xmlcmdshell</code> stored procedure. Adjust the <code>ScriptID</code> parameter as needed.</p><p>Note: Executing PowerShell scripts from SQL Server can pose security risks if not handled carefully. Make sure to validate and sanitize any input to prevent potential SQL injection or script execution vulnerabilities.</p>`,12),o=[l];function p(c,i){return n(),a("div",null,o)}const d=s(t,[["render",p],["__file","post39_ps_run_in_sql_xmlshell.html.vue"]]);export{d as default};
