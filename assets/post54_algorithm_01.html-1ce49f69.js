import{_ as t,W as o,X as e,Y as r}from"./framework-b5535326.js";const n={},a=r('<h2 id="前言" tabindex="-1"><a class="header-anchor" href="#前言" aria-hidden="true">#</a> 前言</h2><blockquote><p>时间复杂度来衡量一个算法的运行效率。</p></blockquote><h2 id="介绍" tabindex="-1"><a class="header-anchor" href="#介绍" aria-hidden="true">#</a> 介绍</h2><p><strong>O(1)</strong></p><p>最低的时间复杂度，也就是耗时与输入数据大小无关，无论输入数据增大多少倍，耗时/耗空间都不变。哈希算法就是典型的O(1)时间复杂度，无论数据规模多大，都可以在<strong>一次计算</strong>后找到目标。</p><p><strong>O(n)</strong></p><p>代表数据量增大几倍，耗时也增大几倍。比如常见的遍历算法。</p><p><strong>O(LogN)</strong></p><p>当数据增大n倍时，耗时增大logn倍（这里的log是以2为底的，比如，当数据增大256倍时，耗时只增大8倍，是比线性还要低的时间复杂度）。二分查找就是O(logn)的算法，每找一次排除一半的可能，256个数据中查找只要找8次就可以找到目标。</p>',9),s=[a];function c(p,_){return o(),e("div",null,s)}const i=t(n,[["render",c],["__file","post54_algorithm_01.html.vue"]]);export{i as default};
