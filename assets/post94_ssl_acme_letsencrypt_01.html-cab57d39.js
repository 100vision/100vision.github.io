import{_ as l,W as i,X as o,Z as e,$ as n,a0 as s,Y as t,G as r}from"./framework-b5535326.js";const c={},d=t('<h2 id="前言" tabindex="-1"><a class="header-anchor" href="#前言" aria-hidden="true">#</a> 前言</h2><p>从前使用的免费SSL证书，开始从1年免费变成了3个月，不再降了。开始考虑使用<code>Let&#39;s Encrypt</code>免费证书，结合它的客户端实现自动续订。</p><h2 id="正文" tabindex="-1"><a class="header-anchor" href="#正文" aria-hidden="true">#</a> 正文</h2><h3 id="let-s-encrypt介绍" tabindex="-1"><a class="header-anchor" href="#let-s-encrypt介绍" aria-hidden="true">#</a> Let&#39;s Encrypt介绍</h3>',4),p={href:"https://letsencrypt.org/zh-cn/about/",target:"_blank",rel:"noopener noreferrer"},u=t('<p><strong>是否安全</strong></p><ul><li>很多大厂，例如<code>Cloudflare</code>都在使用。个人网站使用Let&#39;s Encrypt免费证书还是挺安全的。</li><li>小企业不想使用昂贵的商业收费的ssl证书也可以考虑。</li></ul><h3 id="acme" tabindex="-1"><a class="header-anchor" href="#acme" aria-hidden="true">#</a> ACME</h3><p><code>ACME</code> 是 <code>let&#39;s Encrypt</code>证书管理实现协议。实现ACME协议的客户端可以实现证书申请、续订等。</p><h3 id="acme客户端" tabindex="-1"><a class="header-anchor" href="#acme客户端" aria-hidden="true">#</a> ACME客户端</h3><p>实现ACME协议的客户端，有官方版本，也有第三方。</p>',6),h=e("code",null,"win-acme",-1),m={href:"https://www.win-acme.com",target:"_blank",rel:"noopener noreferrer"},v={href:"https://www.win-acme.com/manual/advanced-use/examples/exchange",target:"_blank",rel:"noopener noreferrer"},b=e("sup",{class:"footnote-ref"},[e("a",{href:"#footnote1"},"[1]"),e("a",{class:"footnote-anchor",id:"footnote-ref1"})],-1),_={href:"https://www.shiyanit.com/news-technical/136.html",target:"_blank",rel:"noopener noreferrer"},g=t(`<div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>wacs.exe --source manual 
--host mail.example.com,webmail.example.com,autodiscover.example.com 
--certificatestore My 
--acl-fullcontrol &quot;network service,administrators&quot; --installation iis,script 
--installationsiteid 1 
--script &quot;./Scripts/ImportExchange.v2.ps1&quot; --scriptparameters &quot;&#39;{CertThumbprint}&#39; &#39;IIS,SMTP,IMAP&#39; 1 &#39;{CacheFile}&#39; &#39;{CachePassword}&#39; &#39;{CertFriendlyName}&#39;&quot;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),x={href:"https://github.com/ebekker/ACMESharp",target:"_blank",rel:"noopener noreferrer"},f=e("code",null,"acme.sh",-1),y=e("sup",{class:"footnote-ref"},[e("a",{href:"#footnote2"},"[2]"),e("a",{class:"footnote-anchor",id:"footnote-ref2"})],-1),k=e("code",null,"certbot",-1),w={href:"https://certbot.eff.org/",target:"_blank",rel:"noopener noreferrer"},C={href:"https://letsencrypt.org/docs/client-options/",target:"_blank",rel:"noopener noreferrer"},E=e("h3",{id:"acme-challenge-介绍",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#acme-challenge-介绍","aria-hidden":"true"},"#"),n(" ACME Challenge 介绍")],-1),S=e("code",null,"ACME Challenge",-1),T=e("code",null,"Challenge",-1),M={href:"https://letsencrypt.org/docs/challenge-types/",target:"_blank",rel:"noopener noreferrer"},q=t("<p>Challenge大概有这两种：</p><ul><li>HTTP-01 challenge</li><li>DNS-01 challenge</li></ul><p><strong>HTTP challenge利弊</strong></p><p>利：配置比较容易</p><p>弊：需要在防火墙上长期开放 <code>80</code> 端口。如果你无法控制防火墙或你的ISP因为安全原因不开放80，就无法使用这个HTTP challenge。</p><p><strong>DNS challenge 利弊</strong></p><p>利：不需要开放80端口。如果DNS服务商支持api访问，可以很方便自动续订证书；还支持通配符证书。</p><p>弊：不让过DNS服务商不知道API访问，需要手动续订证书，比较麻烦。</p><p><strong>根据自己情况选择</strong></p><p>本例使用 <code>HTTP Challene</code>。 如果选择DNS chalenge, 可以先查看一下自己的DNS服务商在受支持列表中：</p>",10),I={href:"https://github.com/acmesh-official/acme.sh/wiki/dnsapi",target:"_blank",rel:"noopener noreferrer"},A=e("h3",{id:"acme-sh的使用模式",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#acme-sh的使用模式","aria-hidden":"true"},"#"),n(" ACME.sh的使用模式")],-1),P=e("blockquote",null,[e("p",null,"ACME.sh支持很多安装和使用模式。根据自己情况选择模式，不同模式则证书申请、安装选项都不同。")],-1),L=e("ul",null,[e("li",null,"webroot模式"),e("li",null,"standalone模式"),e("li",null,"nginx模式"),e("li",null,"其他")],-1),N=e("p",null,[e("strong",null,"根据自己情况选择模式")],-1),J={href:"https://github.com/acmesh-official/acme.sh/wiki/How-to-issue-a-cert",target:"_blank",rel:"noopener noreferrer"},H=e("p",null,[n("本例使用了"),e("code",null,"webroot"),n("模式。")],-1),R={id:"acme-sh-和-webroot模式",tabindex:"-1"},D=e("a",{class:"header-anchor",href:"#acme-sh-和-webroot模式","aria-hidden":"true"},"#",-1),j={href:"http://Acme.sh",target:"_blank",rel:"noopener noreferrer"},B=t(`<p>以<code>proxy.example.cn</code>举例：</p><div class="hint-container note"><p class="hint-container-title">注</p><p>以下操作建议root权限</p></div><ul><li>创建主目录</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">mkdir</span> <span class="token parameter variable">-p</span> /var/www/html/proxy.example.cn/
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>修改现有nginx配置，主要是开启http 80以支持acme.sh的<code>http validation</code></li></ul><p>主要是<code>root</code>指令指定一个站点目录，如下：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>server {

        listen       80;
        server_name proxy.example.cn;
        location ^~ /.well-known/acme-challenge/ {
	        default_type &quot;text/plain&quot;;
	        allow all;
	        root /var/www/html/proxy.example.cn/;
  		 }
		location /{
	   		rewrite ^(.*)$  https://$host$1 permanent;
	   	}
}

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>网络防火墙上开启80端口映射。</li></ul><p><code>HTTP Challenge</code>需要验证你是域名所有者，这个验证过程是通过发送http challenge进来，否则无法申请/续订证书。端口映射按照你的防火墙配置，步骤略</p>`,9),F={class:"hint-container warning"},V=e("p",{class:"hint-container-title"},"注意",-1),$={href:"https://letsencrypt.org/docs/allow-port-80/",target:"_blank",rel:"noopener noreferrer"},G=t(`<ul><li>开始申请 Request the cert</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>acme.sh <span class="token parameter variable">--issue</span> <span class="token parameter variable">-d</span> proxy.example.cn <span class="token parameter variable">-w</span> /var/www/html/proxy.example.cn/
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>如果申请成功，则输出一下类似信息：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>
[Mon Jun  3 16:50:13 CST 2024] Your cert is in: /root/.acme.sh/proxy.example.cn_ecc/proxy.example.cn.cer
[Mon Jun  3 16:50:13 CST 2024] Your cert key is in: /root/.acme.sh/proxy.example.cn_ecc/proxy.example.cn.key
[Mon Jun  3 16:50:13 CST 2024] The intermediate CA cert is in: /root/.acme.sh/proxy.example.cn_ecc/ca.cer
[Mon Jun  3 16:50:13 CST 2024] And the full chain certs is there: /root/.acme.sh/proxy.example.cn_ecc/fullchain.cer

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>安装和拷贝证书。必须使用amce的命令。否则不会自动续订。</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>acme.sh --install-cert <span class="token parameter variable">-d</span> proxy.example.cn <span class="token punctuation">\\</span>
--cert-file      /usr/local/openresty/nginx/cert/certstore/proxy.example.cn.cer  <span class="token punctuation">\\</span>
--key-file       /usr/local/openresty/nginx/cert/certstore/proxy.example.cn.key  <span class="token punctuation">\\</span>
--fullchain-file /usr/local/openresty/nginx/cert/certstore/fullchain.cer <span class="token punctuation">\\</span>
<span class="token parameter variable">--reloadcmd</span>     <span class="token string">&quot;/path_to_nginx/nginx -s reload&quot;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>安装成功后，输出一下类似信息：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>[Mon Jun  3 17:13:52 CST 2024] The domain &#39;proxy.example.cn&#39; seems to have a ECC cert already, lets use ecc cert.
[Mon Jun  3 17:13:52 CST 2024] Installing cert to: /usr/local/openresty/nginx/cert/certstore/proxy.example.cn.cer
[Mon Jun  3 17:13:52 CST 2024] Installing key to: /usr/local/openresty/nginx/cert//certstore/proxy.example.cn.key
[Mon Jun  3 17:13:52 CST 2024] Installing full chain to: /usr/local/openresty/nginx/cert/certstore/fullchain.cer
[Mon Jun  3 17:13:52 CST 2024] Run reload cmd: nginx -s reload
[Mon Jun  3 17:13:52 CST 2024] Reload success
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>修改nginx配置，把证书指向到以上证书路径。</li></ul><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>    ssl_certificate   /usr/local/openresty/nginx/cert/certstore/proxy.example.cn.cer;
    ssl_certificate_key  /usr/local/openresty/nginx/cert/certstore/proxy.example.cn.cer.key;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>然后<code>nginx -s reload</code></li><li>验证证书是否有效。</li><li>检查cron。 这个crob job主要是实现自动续订。auto renewal is scheduled to run by a cron job from the install process check and confirm that the cron job is already there.</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">crontab</span> <span class="token parameter variable">-l</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="配置邮件通知" tabindex="-1"><a class="header-anchor" href="#配置邮件通知" aria-hidden="true">#</a> 配置邮件通知</h3><blockquote><p>通过邮件跟踪证书是否续订成功</p></blockquote><ul><li>配置smtp参数。<code>vi /root/.bashrc</code></li></ul><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>
# Email configuration for acme email notifications
export SMTP_FROM=&quot;waf@example.com&quot;
export SMTP_TO=&quot;it-sysops@example.com&quot;
export SMTP_HOST=&quot;mailserver.example.com&quot;
export SMTP_SECURE=&quot;none&quot;
export SMTP_BIN=&quot;/usr/bin/python2&quot;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>开启邮件通知</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>acme.sh --set-notify --notify-hook smtp --notify-level <span class="token number">2</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>检查是否收到测试邮件。邮件内容类似：</li></ul><p><code>Good, the cert is renewed.</code></p><ul><li>关注证书续订通知邮件。</li></ul><p>默认证书每<code>60</code>天续订一次，即剩余<code>30</code>天会通过cron进行自动续订。</p><p>查看证书信息：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>acme.sh --list
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><hr class="footnotes-sep">`,25),O={class:"footnotes"},W={class:"footnotes-list"},Y={id:"footnote1",class:"footnote-item"},z={href:"https://www.alitajran.com/install-free-lets-encrypt-certificate-in-exchange-server/",target:"_blank",rel:"noopener noreferrer"},U=e("a",{href:"#footnote-ref1",class:"footnote-backref"},"↩︎",-1),X=e("li",{id:"footnote2",class:"footnote-item"},[e("p",null,[n("大致步骤： "),e("a",{href:"#footnote-ref2",class:"footnote-backref"},"↩︎")])],-1);function Z(K,Q){const a=r("ExternalLinkIcon");return i(),o("div",null,[d,e("blockquote",null,[e("p",null,[n("Let's Encrypt 是免费、开放和自动化的证书颁发机构。由非盈利组织互联网安全研究小组（ISRG）运营。这里访问 "),e("a",p,[n("Let's Encrypt官网"),s(a)]),n(".")])]),u,e("ul",null,[e("li",null,[n("Windows平台的有 "),h,n(", 官网 "),e("a",m,[n("win-acme"),s(a)]),n(",可以支持IIS, Exchange服务器证书。详细请参考: "),e("a",v,[n("Example #1: Microsoft Exchange"),s(a)]),n(),b,n(", "),e("a",_,[n("Example 2#: IIS"),s(a)])])]),g,e("ul",null,[e("li",null,[e("p",null,[n("Windows平台的还有Powershell客户端实现，详见 "),e("a",x,[n("ACMESharp"),s(a)]),n("。不仅是Powershell实现，也是C#实现库。")])]),e("li",null,[e("p",null,[n("Linux平台下，有官方的"),f,n(),y,n(" 和"),k,n(", 详见:"),e("a",w,[n("Certbot Instructions"),s(a)]),n("。")])]),e("li",null,[e("p",null,[n("更多客户端可以参考："),e("a",C,[n("more client options"),s(a)])])])]),E,e("blockquote",null,[e("p",null,[n("要先了解一下"),S,n("。Let's Encrypt仅给域名所有者颁发免费证书，因此申请证书前我们需要通过域名所有者身份验证。Let's Encrypt验证方法就是"),T,n("。了解更多 "),e("a",M,[n("https://letsencrypt.org/docs/challenge-types/"),s(a)])])]),q,e("p",null,[e("a",I,[n("https://github.com/acmesh-official/acme.sh/wiki/dnsapi"),s(a)])]),A,P,L,N,e("p",null,[e("a",J,[n("https://github.com/acmesh-official/acme.sh/wiki/How-to-issue-a-cert"),s(a)])]),H,e("h3",R,[D,n(),e("a",j,[n("Acme.sh"),s(a)]),n(" 和 webroot模式")]),B,e("div",F,[V,e("p",null,[n("80端口要保持一直开放。从首次申请到后期每次自动续订。关于保持80端口常开，很多人认为不安全，因此Let's Encrypt写了一篇文章特别解释了为什么防火墙保持80端口不会带来安全风险。"),e("a",$,[n("https://letsencrypt.org/docs/allow-port-80/"),s(a)]),n(" 但要注意把http重定向80到443解决网络攻击面。")])]),G,e("section",O,[e("ol",W,[e("li",Y,[e("p",null,[n("详细使用案例可以参考 "),e("a",z,[n("Install FREE Let’s Encrypt certificate in Exchange Server"),s(a)]),n(),U])]),X])])])}const ne=l(c,[["render",Z],["__file","post94_ssl_acme_letsencrypt_01.html.vue"]]);export{ne as default};
