import{_ as o,W as l,X as c,Z as e,$ as n,a0 as r,a1 as i,Y as a,G as d}from"./framework-b5535326.js";const h={},p=e("h2",{id:"前言",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#前言","aria-hidden":"true"},"#"),n(" 前言")],-1),u=e("p",null,"国内环境下，除了不能直连海外服务器问题外，还有DNS污染问题让人恼火，因此需要了解一下怎么解决。",-1),D=e("h2",{id:"什么是dns污染",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#什么是dns污染","aria-hidden":"true"},"#"),n(" 什么是DNS污染")],-1),_={href:"https://zh.wikipedia.org/zh-cn/%E5%9F%9F%E5%90%8D%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%BC%93%E5%AD%98%E6%B1%A1%E6%9F%93",target:"_blank",rel:"noopener noreferrer"},m=a('<h2 id="正文" tabindex="-1"><a class="header-anchor" href="#正文" aria-hidden="true">#</a> 正文</h2><blockquote><p>通过使用dnsmasq和DOH服务器解决DNS污染问题。</p></blockquote><h3 id="实现原理" tabindex="-1"><a class="header-anchor" href="#实现原理" aria-hidden="true">#</a> 实现原理：</h3><ul><li>主要使用加密的DNS查询。普通DNS流量因为都是明文，没有加密才会被导致篡改，给DNS流量加密，套一层解决。加密方法主要有这么几种。</li></ul><p><code>DOH (DNS Over HTTPS)</code>， <code>DOT (DNS Over TLS)</code>,<code>DNS Encrypt</code></p><ul><li>配合使用DNS缓存服务器。加密的DNS查询消耗大，增加DNS查询的延迟，因此需要使用缓存服务器加快查询。</li></ul><h3 id="具体实现" tabindex="-1"><a class="header-anchor" href="#具体实现" aria-hidden="true">#</a> 具体实现</h3><ul><li>在本地部署一台DNS缓存服务器，然后配置它的上游DNS服务器通讯加密。实现方法可以是DOH或是DNS Encrypt。</li><li>本地其他主机的DNS服务器指向到本地DNSMasq缓存服务器。</li></ul><h2 id="方案选项1-配置本地dns缓存服务器-doh" tabindex="-1"><a class="header-anchor" href="#方案选项1-配置本地dns缓存服务器-doh" aria-hidden="true">#</a> 方案选项1：配置本地DNS缓存服务器 + DOH</h2><h3 id="步骤1-选择doh服务器作为上游dns服务器" tabindex="-1"><a class="header-anchor" href="#步骤1-选择doh服务器作为上游dns服务器" aria-hidden="true">#</a> 步骤1：选择DOH服务器作为上游DNS服务器</h3><p>当前使用比较多的是DOH，比较著名的支持DOH的公网DNS服务器有：</p><ul><li>Cloudflare的<code>1.1.1.1</code></li><li>Google的 <code>8.8.8.8</code></li></ul>',12),N={href:"https://github.com/dnscrypt/dnscrypt-resolvers",target:"_blank",rel:"noopener noreferrer"},S=a(`<h3 id="步骤2-部署本地dns缓存服务器" tabindex="-1"><a class="header-anchor" href="#步骤2-部署本地dns缓存服务器" aria-hidden="true">#</a> 步骤2：部署本地DNS缓存服务器</h3><p>本地DNS缓存服务器，它扮演DOH客户端，负责转发本地的DNS查询给外部的DOH服务器，需要本地部署。 可以使用支持DOH的客户端软件部署本地DNS缓存服务器。比较著名支持DOH的DNS客户端软件有：</p><ul><li><code>dnsmasq</code>,确保您的 Dnsmasq 版本是 2.83 或以上</li><li><code>dnscrypt-proxy</code></li></ul><p><strong>配置参考</strong></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code># /etc/dnsmasq.conf
server=https://dns.example.com/dns-query
server=https://dns2.example.com/dns-query
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,5),f={href:"https://page.codespaper.com/2019/dnsmasq-cloudflare-doh/",target:"_blank",rel:"noopener noreferrer"},b=a('<h3 id="步骤3-使用本地缓存服务器dnsmasq" tabindex="-1"><a class="header-anchor" href="#步骤3-使用本地缓存服务器dnsmasq" aria-hidden="true">#</a> 步骤3：使用本地缓存服务器dnsmasq</h3><ul><li>如果是dnsmasq和本机一台主机使用，可以修改<code>/etc/resolv.conf</code>。删除所有<code>nameserver</code>，添加一行<code>nameserver 127.0.0.1</code> 即可。</li><li>如果是供内网所有主机使用，修改内网主机的DNS服务器指向到dnsmasq。</li></ul><h2 id="方案选项2-使用dns-encrypt" tabindex="-1"><a class="header-anchor" href="#方案选项2-使用dns-encrypt" aria-hidden="true">#</a> 方案选项2：使用DNS Encrypt</h2>',3),x={href:"https://github.com/DNSCrypt/dnscrypt-proxy",target:"_blank",rel:"noopener noreferrer"};function v(E,y){const s=d("ExternalLinkIcon"),t=d("RouterLink");return l(),c("div",null,[p,u,D,e("blockquote",null,[e("p",null,[n("又称DNS“投毒”,执行DNS劫持攻击导致下游DNS服务器缓存了错误记录的现象。详见"),e("a",_,[n("wiki"),r(s)])])]),m,e("blockquote",null,[e("p",null,[n("更多可以查询这里 "),e("a",N,[n("https://github.com/dnscrypt/dnscrypt-resolvers"),r(s)])])]),S,e("ul",null,[e("li",null,[e("a",f,[n("dnsmasq + Cloudflare DoH 自建 DNS"),r(s)])]),e("li",null,[r(t,{to:"/zh/%E4%BF%A1%E6%81%AF%E6%8A%80%E6%9C%AF/%E7%BD%91%E7%BB%9C/shttps:/developers.cloudflare.com/1.1.1.1/encryption/dns-over-https/dns-over-https-client/"},{default:i(()=>[n("Connect to 1.1.1.1 using DoH client")]),_:1})])]),b,e("p",null,[n("可以参考 "),e("a",x,[n("https://github.com/DNSCrypt/dnscrypt-proxy"),r(s)])])])}const q=o(h,[["render",v],["__file","post46_dns_solutions.html.vue"]]);export{q as default};
